// Generated by LiveScript 1.5.0
(function(){
  var knex, Adapter, ref$, each, objToPairs, isType, keys, SQL;
  knex = require('knex');
  Adapter = require('./Adapter');
  ref$ = require('prelude-ls'), each = ref$.each, objToPairs = ref$.objToPairs, isType = ref$.isType, keys = ref$.keys;
  SQL = (function(superclass){
    var prototype = extend$((import$(SQL, superclass).displayName = 'SQL', SQL), superclass).prototype, constructor = SQL;
    function SQL(config){
      this.config = {};
      this.config.client = config.type;
      this.config.connection = config;
      this.driver = knex(this.config);
    }
    SQL.prototype.query = function(builder){
      var query, this$ = this;
      query = this.driver(builder.model.name);
      each(function(it){
        return query = this$[it.method](query, it.params);
      })(
      builder.queries);
      return query;
    };
    SQL.prototype.where = function(query, params){
      each(function(it){
        if (isType('Array', it[1])) {
          return query = query.whereIn.apply(query, it);
        } else if (isType('Object', it[1])) {
          return each(function(){
            switch (false) {
            case !'$gt':
              return query.where(it[0], '>', it[1].$gt);
            }
          })(
          keys(
          it[1]));
        } else {
          return query = query.where.apply(query, it);
        }
      })(
      objToPairs(
      params));
      return query;
    };
    return SQL;
  }(Adapter));
  each(function(name){
    return SQL.prototype[name] = function(query, params){
      return query[name](params);
    };
  })(
  ['select', 'limit']);
  module.exports = SQL;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
