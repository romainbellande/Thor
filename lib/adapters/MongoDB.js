// Generated by LiveScript 1.5.0
(function(){
  var mongoose, test, Adapter, MongoDB;
  mongoose = require('mongoose');
  test = require('assert');
  'use strict';
  Adapter = require('./Adapter');
  MongoDB = (function(superclass){
    var prototype = extend$((import$(MongoDB, superclass).displayName = 'MongoDB', MongoDB), superclass).prototype, constructor = MongoDB;
    function MongoDB(config){
      MongoDB.superclass.apply(this, arguments);
      this.connect();
    }
    MongoDB.prototype.connect = function(){
      var url, this$ = this;
      url = this.host + '/' + this.database;
      return mongoose.connect(url, function(err, db){
        if (err != null) {
          return console.log("db " + this$.database + ": connection error", err);
        } else {
          return console.log("db " + this$.database + ": connection successfull");
        }
      });
    };
    MongoDB.prototype.query = function(builder){
      console.log('query');
      return mongoose.connection.on('open', function(){
        return mongoose.connection.db.collection(builder.model.name, function(err, collection){
          return collection.find().toArray(function(err2, doc){
            if (err2 != null) {
              console.log(err2);
            }
            return console.log(doc);
          });
        });
      });
    };
    MongoDB.prototype.select = function(){
      return console.log('select');
    };
    return MongoDB;
  }(Adapter));
  module.exports = MongoDB;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
